import type { NextPage } from 'next';
import jwt from 'jsonwebtoken';
import { useRouter } from 'next/router';
import Head from 'next/head';
import styles from '../../styles/Home.module.css';
import { Grid, IconButton, TextField, Typography } from '@mui/material';
import { useEffect, useRef, useState } from 'react';
import { CopyAll } from '@mui/icons-material';

const Home: NextPage = () => {
  const [userInput, setUserInput] = useState('');
  const [result, setResult] = useState('');
  const [secret, setSecret] = useState('jwt-string');
  const [jsonError, setJsonError] = useState(false);

  const firstTime = useRef(true);
  const router = useRouter();

  // const setQuery = (type: 'en' | 'de') => {
  //   router.push({
  //     query: {
  //       [type]: userInput
  //     }
  //   });
  // };

  const onInputChange = (newUserInput: string) => {
    setUserInput(newUserInput);
    if (newUserInput) {
      try {
        const parsedJson = JSON.parse(newUserInput);
        setJsonError(false);
        const newJwt = jwt.sign(parsedJson, secret);
        setResult(newJwt);
        router.push({
          query: {
            jwt: newJwt
          }
        });
      } catch (err) {
        console.log('dsasadsad', err);
        setJsonError(true);
      }
    }
  };

  const onSecretChange = (newSecret: string) => {
    setSecret(newSecret);
    if (newSecret) {
      const newJwt = jwt.sign(userInput, newSecret);
      setResult(newJwt);
      router.push({
        query: {
          jwt: newJwt
        }
      });
    }
  };

  const onResultChange = (newResult: string) => {
    if (newResult) {
      const jwtToken = jwt.decode(newResult);
      setResult(newResult);
      setUserInput(JSON.stringify(jwtToken, null, 2).replace(/\\n/g, ''));
      router.push({
        query: {
          jwt: newResult
        }
      });
    } else {
      setResult(newResult);
      setUserInput('');
      router.push({
        query: {
          jwt: newResult
        }
      });
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(result);
  };

  useEffect(() => {
    const { jwt } = router.query;
    if (jwt && firstTime.current) {
      firstTime.current = false;
      onResultChange(jwt as string);
    }
  }, [router.query]);

  return (
    <div className={styles.container}>
      <Head>
        <title>JWT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container justifyContent="center" alignItems="center" columns={16} spacing={6}>
        <Grid item xs={16}>
          <Typography sx={{ textAlign: 'center' }} variant="h2">
            JWT Creator
          </Typography>
        </Grid>
        <Grid item md={10} xs={16} sm={16}>
          <TextField
            value={userInput}
            placeholder="Enter Json..."
            error={jsonError}
            helperText={jsonError && 'Not Valid JSON'}
            onChange={(e) => onInputChange(e.target.value)}
            fullWidth
            multiline
            rows={8}
          />
        </Grid>
        <Grid item md={6} xs={16}>
          <TextField
            InputProps={{
              endAdornment: (
                <IconButton onClick={copyToClipboard}>
                  <CopyAll />
                </IconButton>
              )
            }}
            placeholder="Secret"
            label="Secret"
            onChange={(e) => onSecretChange(e.target.value)}
            value={secret}
            fullWidth
          />
        </Grid>
        <Grid item xs={16}>
          <TextField
            InputProps={{
              endAdornment: (
                <IconButton onClick={copyToClipboard}>
                  <CopyAll />
                </IconButton>
              )
            }}
            placeholder="Result"
            label="Jwt Token"
            onChange={(e) => onResultChange(e.target.value)}
            value={result}
            fullWidth
            multiline
            rows={8}
          />
        </Grid>
      </Grid>
    </div>
  );
};

export default Home;
