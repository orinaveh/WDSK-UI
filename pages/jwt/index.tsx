import type { NextPage } from 'next';
import jwt from 'jsonwebtoken';
import { useRouter } from 'next/router';
import Head from 'next/head';
import styles from '../../styles/Home.module.css';
import pageStyles from './index.module.scss';
import { IconButton, TextField, Typography } from '@mui/material';
import { useEffect, useRef, useState } from 'react';
import { CopyAll } from '@mui/icons-material';
import useCopyToClipboard from '../../hooks/useCopyToClipboard';

const Home: NextPage = () => {
  const [userInput, setUserInput] = useState('');
  const [result, setResult] = useState('');
  const [secret, setSecret] = useState('jwt-string');
  const [jsonError, setJsonError] = useState(false);

  const copySecret = useCopyToClipboard(secret);
  const copyToken = useCopyToClipboard(result);

  const firstTime = useRef(true);
  const router = useRouter();

  const onInputChange = (newUserInput: string) => {
    setUserInput(newUserInput);
    if (newUserInput) {
      try {
        const parsedJson = JSON.parse(newUserInput);
        setJsonError(false);
        const newJwt = jwt.sign(parsedJson, secret);
        setResult(newJwt);
        router.push({
          query: {
            jwt: newJwt
          }
        });
      } catch (err) {
        setJsonError(true);
      }
    }
  };

  const onSecretChange = (newSecret: string) => {
    setSecret(newSecret);
    if (newSecret) {
      const newJwt = jwt.sign(userInput, newSecret);
      setResult(newJwt);
      router.push({
        query: {
          jwt: newJwt
        }
      });
    }
  };

  const onResultChange = (newResult: string) => {
    if (newResult) {
      const jwtToken = jwt.decode(newResult);
      setResult(newResult);
      setUserInput(JSON.stringify(jwtToken, null, 2).replace(/\\n/g, ''));
      router.push({
        query: {
          jwt: newResult
        }
      });
    } else {
      setResult(newResult);
      setUserInput('');
      router.push({
        query: {
          jwt: newResult
        }
      });
    }
  };

  useEffect(() => {
    const { jwt } = router.query;
    if (jwt && firstTime.current) {
      firstTime.current = false;
      onResultChange(jwt as string);
    }
  }, [router.query]);

  return (
    <div className={styles.container}>
      <Head>
        <title>JWT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Typography sx={{ textAlign: 'center' }} variant="h2">
        JWT Creator
      </Typography>
      <div className={pageStyles.layout}>
        <TextField
          className={pageStyles.layout__json}
          value={userInput}
          placeholder="Enter Json..."
          error={jsonError}
          helperText={jsonError && 'Not Valid JSON'}
          onChange={(e) => onInputChange(e.target.value)}
          fullWidth
          multiline
          rows={10}
        />
        <TextField
          className={pageStyles.layout__secret}
          InputProps={{
            endAdornment: (
              <IconButton onClick={copySecret}>
                <CopyAll />
              </IconButton>
            )
          }}
          placeholder="Secret"
          label="Secret"
          onChange={(e) => onSecretChange(e.target.value)}
          value={secret}
          fullWidth
        />
        <TextField
          className={pageStyles.layout__token}
          InputProps={{
            endAdornment: (
              <IconButton onClick={copyToken}>
                <CopyAll />
              </IconButton>
            )
          }}
          placeholder="Result"
          label="Jwt Token"
          onChange={(e) => onResultChange(e.target.value)}
          value={result}
          fullWidth
          rows={15}
          multiline
        />
      </div>
    </div>
  );
};

export default Home;
